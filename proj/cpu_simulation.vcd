$date
    Wed Jul  2 11:01:44 2014
$end
$version
    MyHDL 0.8
$end
$timescale
    1ns
$end

$scope module cpu_simulation $end
$var reg 16 ! reg_dout $end
$var reg 1 " reg_we $end
$var reg 6 # op1 $end
$var reg 6 $ op2 $end
$var real 1 % clk $end
$var reg 16 & rom_dout $end
$var reg 16 ' ram_din $end
$var reg 16 ( pc $end
$var reg 4 ) opcode $end
$var reg 16 * reg_din $end
$var reg 1 + ram_we $end
$var reg 16 , reg_current $end
$var reg 16 - ram_addr $end
$var reg 16 . ram_dout $end
$scope module iu $end
$var reg 16 & din $end
$var reg 4 ) opcode $end
$var reg 6 # op1 $end
$var reg 6 $ op2 $end
$upscope $end
$scope module rb $end
$var reg 16 , reg $end
$var reg 1 " we $end
$var reg 16 ! dout $end
$var reg 16 * din $end
$var real 1 % clk $end
$var reg 16 / registers(0) $end
$var reg 16 0 registers(1) $end
$var reg 16 1 registers(2) $end
$var reg 16 2 registers(3) $end
$var reg 16 3 registers(4) $end
$var reg 16 4 registers(5) $end
$var reg 16 5 registers(6) $end
$var reg 16 6 registers(7) $end
$var reg 16 7 registers(8) $end
$var reg 16 8 registers(9) $end
$var reg 16 9 registers(10) $end
$var reg 16 : registers(11) $end
$var reg 16 ; registers(12) $end
$var reg 16 < registers(13) $end
$upscope $end
$scope module ram $end
$var reg 16 ' din $end
$var reg 1 + we $end
$var reg 16 . dout $end
$var reg 16 - addr $end
$var real 1 % clk $end
$var reg 16 = mem(0) $end
$var reg 16 > mem(1) $end
$var reg 16 ? mem(2) $end
$var reg 16 @ mem(3) $end
$var reg 16 A mem(4) $end
$var reg 16 B mem(5) $end
$var reg 16 C mem(6) $end
$var reg 16 D mem(7) $end
$var reg 16 E mem(8) $end
$var reg 16 F mem(9) $end
$var reg 16 G mem(10) $end
$var reg 16 H mem(11) $end
$var reg 16 I mem(12) $end
$var reg 16 J mem(13) $end
$var reg 16 K mem(14) $end
$var reg 16 L mem(15) $end
$var reg 16 M mem(16) $end
$var reg 16 N mem(17) $end
$var reg 16 O mem(18) $end
$var reg 16 P mem(19) $end
$var reg 16 Q mem(20) $end
$var reg 16 R mem(21) $end
$var reg 16 S mem(22) $end
$var reg 16 T mem(23) $end
$var reg 16 U mem(24) $end
$var reg 16 V mem(25) $end
$var reg 16 W mem(26) $end
$var reg 16 X mem(27) $end
$var reg 16 Y mem(28) $end
$var reg 16 Z mem(29) $end
$var reg 16 [ mem(30) $end
$var reg 16 \ mem(31) $end
$upscope $end
$scope module rom $end
$var reg 16 & dout $end
$var reg 16 ( addr $end
$upscope $end
$scope module clk_driver $end
$var real 1 % clk $end
$upscope $end
$upscope $end

$enddefinitions $end
$dumpvars
b0000000000000000 !
0"
b000000 #
b000000 $
s0 %
b0000000000000000 &
b0000000000000000 '
b0000000000000000 (
b0000 )
b0000000000000000 *
0+
b0000000000000000 ,
b0000000000000000 -
b0000000000000000 .
b0000000000000000 /
b0000000000000000 0
b0000000000000000 1
b0000000000000000 2
b0000000000000000 3
b0000000000000000 4
b0000000000000000 5
b0000000000000000 6
b0000000000000000 7
b0000000000000000 8
b0000000000000000 9
b0000000000000000 :
b0000000000000000 ;
b0000000000000000 <
b0000000000000000 =
b0000000000000000 >
b0000000000000000 ?
b0000000000000000 @
b0000000000000000 A
b0000000000000000 B
b0000000000000000 C
b0000000000000000 D
b0000000000000000 E
b0000000000000000 F
b0000000000000000 G
b0000000000000000 H
b0000000000000000 I
b0000000000000000 J
b0000000000000000 K
b0000000000000000 L
b0000000000000000 M
b0000000000000000 N
b0000000000000000 O
b0000000000000000 P
b0000000000000000 Q
b0000000000000000 R
b0000000000000000 S
b0000000000000000 T
b0000000000000000 U
b0000000000000000 V
b0000000000000000 W
b0000000000000000 X
b0000000000000000 Y
b0000000000000000 Z
b0000000000000000 [
b0000000000000000 \
$end
b0100000110101101 &
b0100 )
b000110 #
b101101 $
#10
sTrue %
b0000000000000110 ,
b0000000000101101 *
1"
#20
sFalse %
#30
sTrue %
b0000000000101101 5
0"
b0000000000000001 ,
#40
sFalse %
#50
sTrue %
1"
b0000000000000001 *
#60
sFalse %
#70
sTrue %
b0000000000000001 0
b0000000000000001 !
0"
b0000000000000001 (
b0100000111001001 &
b000111 #
b001001 $
#80
sFalse %
#90
sTrue %
b0000000000000111 ,
b0000000000001001 *
1"
b0000000000000000 !
#100
sFalse %
#110
sTrue %
b0000000000001001 6
0"
b0000000000000001 ,
b0000000000000001 !
#120
sFalse %
#130
sTrue %
1"
b0000000000000010 *
#140
sFalse %
#150
sTrue %
b0000000000000010 0
b0000000000000010 !
0"
b0000000000000010 (
b1001000110000000 &
b1001 )
b000110 #
b000000 $
#160
sFalse %
#170
sTrue %
#180
sFalse %
#190
sTrue %
b0000000000000110 ,
1"
b1111111111111101 *
b0000000000101101 !
#200
sFalse %
#210
sTrue %
0"
b0000000000000001 ,
b1111111111111101 5
b0000000000000010 !
#220
sFalse %
#230
sTrue %
1"
b0000000000000011 *
#240
sFalse %
#250
sTrue %
b0000000000000011 0
b0000000000000011 !
0"
b0000000000000011 (
b0000000000000000 &
b0000 )
b000000 #
#260
sFalse %
#270
sTrue %
b0000000000000000 ,
b0000000000000000 !
#280
sFalse %
#290
sTrue %
b0000000000000001 ,
b0000000000000011 !
#300
sFalse %
#310
sTrue %
b0000000000000010 ,
b0000000000000000 !
#320
sFalse %
#330
sTrue %
b0000000000000011 ,
#340
sFalse %
#350
sTrue %
b0000000000000100 ,
#360
sFalse %
#370
sTrue %
b0000000000000101 ,
#380
sFalse %
#390
sTrue %
b0000000000000110 ,
b1111111111111101 !
#400
sFalse %
#410
sTrue %
b0000000000000111 ,
b0000000000001001 !
#420
sFalse %
#430
sTrue %
b0000000000001000 ,
b0000000000000000 !
#440
sFalse %
#450
sTrue %
b0000000000001001 ,
#460
sFalse %
#470
sTrue %
b0000000000001010 ,
#480
sFalse %
#490
sTrue %
b0000000000001011 ,
#500
sFalse %
#510
sTrue %
b0000000000001100 ,
#520
sFalse %
#530
sTrue %
b0000000000001101 ,
#540
sFalse %
#550
sTrue %
#560
sFalse %
#570
sTrue %
b0000000000000001 -
#580
sFalse %
#590
sTrue %
b0000000000000010 -
#600
sFalse %
#610
sTrue %
b0000000000000011 -
#620
sFalse %
#630
sTrue %
b0000000000000100 -
#640
sFalse %
#650
sTrue %
b0000000000000101 -
#660
sFalse %
#670
sTrue %
b0000000000000110 -
#680
sFalse %
#690
sTrue %
b0000000000000111 -
#700
sFalse %
#710
sTrue %
b0000000000001000 -
#720
sFalse %
#730
sTrue %
b0000000000001001 -
#740
sFalse %
#750
sTrue %
b0000000000001010 -
#760
sFalse %
#770
sTrue %
b0000000000001011 -
#780
sFalse %
#790
sTrue %
b0000000000001100 -
#800
sFalse %
#810
sTrue %
b0000000000001101 -
#820
sFalse %
#830
sTrue %
b0000000000001110 -
#840
sFalse %
#850
sTrue %
b0000000000001111 -
#860
sFalse %
#870
sTrue %
b0000000000010000 -
#880
sFalse %
#890
sTrue %
b0000000000010001 -
#900
sFalse %
#910
sTrue %
b0000000000010010 -
#920
sFalse %
#930
sTrue %
b0000000000010011 -
#940
sFalse %
#950
sTrue %
b0000000000010100 -
#960
sFalse %
#970
sTrue %
b0000000000010101 -
#980
sFalse %
#990
sTrue %
b0000000000010110 -
#1000
sFalse %
#1010
sTrue %
b0000000000010111 -
#1020
sFalse %
#1030
sTrue %
b0000000000011000 -
#1040
sFalse %
#1050
sTrue %
b0000000000011001 -
#1060
sFalse %
#1070
sTrue %
b0000000000011010 -
#1080
sFalse %
#1090
sTrue %
b0000000000011011 -
#1100
sFalse %
#1110
sTrue %
b0000000000011100 -
#1120
sFalse %
#1130
sTrue %
b0000000000011101 -
#1140
sFalse %
#1150
sTrue %
b0000000000011110 -
#1160
sFalse %
#1170
sTrue %
b0000000000011111 -
#1180
sFalse %
#1190
sTrue %
